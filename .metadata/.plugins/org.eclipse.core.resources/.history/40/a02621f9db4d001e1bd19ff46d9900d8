package com.naver.myhome4.config;

import com.naver.security.CustomAccessDeniedHandler;
import com.naver.security.CustomUserDetailsService;
import com.naver.security.LoginFailHandler;
import com.naver.security.LoginSuccessHandler;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.access.AccessDeniedHandler;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;

@EnableWebSecurity //스프링과 시큐리티 결합
@Configuration
public class Security_Config extends WebSecurityConfigurerAdapter{
	
	// <security:http> 설정 부분
	@Override
	protected void configure(HttpSecurity http) throws Exception{
		http.authorizeRequests()
				.antMatchers("/resources/**/**").permitAll()
				.antMatchers("/member/login").permitAll()
				.antMatchers("/member/join").permitAll()
				.antMatchers("/member/idcheck").permitAll()
				.antMatchers("/member/joinProcess").permitAll()
				.antMatchers("/member/list").access("hasRole('ROLE_ADMIN')")
				.antMatchers("/member/info").access("hasRole('ROLE_ADMIN')")
				.antMatchers("/**").access("hasAnyRole('ROLE_MEMBER','ROLE_ADMIN')");
		
		http.formLogin().loginPage("/member/login")
				        .loginProcessingUrl("/member/loginProcess")
				        .usernameParameter("id")
				        .passwordParameter("password")
				        .successHandler(loginSuccessHandler())
				        .failureHandler(loginFailHandler());
		 /*
	       * (1) logoutSuccessUrl : 로그아웃 후 이동할 주소
	       * (2) logoutUrl : (여기서 처리하기 때문에 컨트롤러 logout 제거 합니다. post방식을 요구합니다.)
	       * (3) invalidateHttpSession : 로그아웃시 세션 속성들 제거
	       * (4) deleteCookies : 쿠키 제거
	       */
	      http.logout().logoutSuccessUrl("/member/login")
	      .logoutUrl("/member/logout")
	      .invalidateHttpSession(true)
	      .deleteCookies("remember-me", "JSESSION_ID");
	      
	      http.rememberMe()
	      .rememberMeParameter("remember-me")
	      .rememberMeCookieName("remember-me")
	      .tokenValiditySeconds(2419200);
	      
	      http.exceptionHandling().accessDeniedHandler(accessDeniedHandler());
	      
		
		
	}

	@Override
	protected void configure(AuthenticationManagerBuilder auth) {
		auth.userDetailsService(customUserService()).passwordEncoder(passwordEncoder());
	}
	
	//로그인 성공시 실행할 객체 생성
	@Bean
	public AuthenticationSuccessHandler loginSuccessHandler() {
		return new LoginSuccessHandler(); //패키지 com.naver.security에 존재하는 모든 클래스 파일에 @Service를 삭제합니다.
	}
	
	

}
