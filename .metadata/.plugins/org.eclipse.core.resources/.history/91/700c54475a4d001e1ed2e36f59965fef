package com.naver.myhome4.config;

import com.naver.security.CustomAccessDeniedHandler;
import com.naver.security.CustomUserDetailsService;
import com.naver.security.LoginFailHandler;
import com.naver.security.LoginSuccessHandler;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.access.AccessDeniedHandler;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;

@EnableWebSecurity //스프링과 시큐리티 결합
@Configuration
public class Security_Config extends WebSecurityConfigurerAdapter{
	
	// <security:http> 설정 부분
	@Override
	protected void configure(HttpSecurity http) throws Exception{
		http.authorizeRequests()
				.antMatchers("/resources/**/**").permitAll()
				.antMatchers("/member/login").permitAll()
				.antMatchers("/member/join").permitAll()
				.antMatchers("/member/idcheck").permitAll()
				.antMatchers("/member/joinProcess").permitAll()
				.antMatchers("/member/list").access("hasRole('ROLE_ADMIN')")
				.antMatchers("/member/info").access("hasAnyRole('ROLE_MEMBER','ROLE_ADMIN')");
		
		http.formLogin().loginPage("/member/login")
				        .loginProcessingUrl("/member/loginProcess")
				        .usernameParameter("id")
				        .passwordParameter("password")
				        .successHandler(loginSuccessHandler())
				        .failureHandler(loginFailHandler());
						
	}

}
